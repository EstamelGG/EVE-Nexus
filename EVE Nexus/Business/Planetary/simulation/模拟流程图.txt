```mermaid
graph TD
    A[时间点T] --> B[获取该时间点的所有事件]
    B --> C{事件类型?}
    
    subgraph 采集器事件处理
        C -->|采集器事件| D[单个采集器生产完成事件]
        D --> E[计算采集产出]
        E --> F[更新采集器状态]
        F --> G[输出资源到仓库]
        G --> H[触发资源分配]
    end
    
    subgraph 工厂事件处理
        C -->|工厂事件| I[工厂生产完成事件]
        I --> J1[输出产品到目的地]
        J1 --> J2[检查工厂缓冲区]
        J2 --> K{缓冲区是否满足配方需求?}
        K -->|是| L[消耗缓冲区材料]
        L --> M[设置为激活状态并开始新的生产周期]
        K -->|否| N[设置为未激活状态并保留缓冲区材料]
        M & N --> P[触发资源分配]
    end
    
    subgraph 资源分配处理
        subgraph 仓库优先级
            Q[开始资源分配] --> R[按ID排序所有可分配的仓库]
            R --> S[取出ID最小的仓库]
        end

        subgraph 工厂路由优先级排序
            S --> T[获取仓库关联的所有未满缓冲区工厂]
            T --> U[计算每个工厂的缺货量]
            U --> V[缺货量 = 配方需求量 - 当前缓冲区量]
            V --> W[按缺货量和工厂ID排序]
        end
        
        subgraph 轮次分配循环
            W --> Z1[开始新的分配轮次]
            Z1 --> Z2[按优先级顺序为每个工厂分配一次资源]
            Z2 --> AA{是否存在未满缓冲区且仓库有剩余资源?}
            AA -->|是| Z1
            AA -->|否| AB{是否还有未处理的仓库?}
            AB -->|是| S
        end
    end

    %% 事件处理完成后的流程
    H --> AC[处理下一个事件]
    P --> AC
    AB -->|否| AC
    AC --> C

    %% 当所有事件处理完成
    C -->|无更多事件| AD[时间点T处理完成]

    %% 添加约束说明
    subgraph Constraints[系统约束]
        C1[1. 采集器和工厂输出事件不会同时发生]
        C2[2. 多个采集器输出事件不会同时发生]
        C3[3. 仓储不能将物资输出到另一仓储]
        C4[4. 仓储按ID顺序处理资源分配]
        C5[5. 工厂优先级规则:]
        C5_1[   - 缺货量越小优先级越高]
        C5_2[   - 缺货量相同时ID小者优先]
        C6[6. 资源分配采用轮次机制:]
        C6_1[   - 每轮为所有工厂分配一次]
        C6_2[   - 仓库有剩余且有工厂未满则继续]
    end

    %% 样式设置
    classDef default fill:#f9f9f9,stroke:#333,stroke-width:2px;
    classDef event fill:#e1f5fe,stroke:#0288d1,stroke-width:2px;
    classDef decision fill:#fff3e0,stroke:#f57c00,stroke-width:2px;
    classDef process fill:#f1f8e9,stroke:#689f38,stroke-width:2px;
    classDef constraint fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px;

    %% 应用样式
    class A,B,AC,AD default;
    class C,K,AA,AB decision;
    class D,E,F,G,H,I,J1,J2,L,M,N,P process;
    class Q,R,S,T,U,V,W,Z1,Z2 process;
    class C1,C2,C3,C4,C5,C5_1,C5_2,C6,C6_1,C6_2 constraint;
``` 