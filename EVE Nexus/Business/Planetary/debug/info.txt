让我们梳理一下完整的流程：
1. 当工厂收到资源时，hasReceivedInputs被设置为true
2. 工厂被重新安排运行（通过schedulePin）
3. 在schedulePin中，调用getNextRunTime获取下一次运行时间
4. 如果工厂不活跃但有足够的输入材料，getNextRunTime返回null
5. 当nextRunTime为null时，schedulePin会在当前时间安排工厂运行（addTimer(pin.id, currentSimTime)）
6. 这个事件被添加到事件队列中
7. 在事件处理循环中，工厂的事件被处理，调用evaluatePin
8. 在evaluatePin中，工厂会检查材料是否足够，如果足够，就会消耗材料并开始生产

工厂收到资源到开始生产的完整流程:

情况一：收到足够的资源
1. 当工厂收到资源时，hasReceivedInputs被设置为true
这发生在addCommodity方法中，只要收到任何数量的资源就会设置此标志
2. 工厂被重新安排运行（通过schedulePin）
这发生在资源转移完成后，对所有收到资源的消费者设施执行
3. 在schedulePin中，调用getNextRunTime获取下一次运行时间
这是决定工厂何时运行的关键步骤
4. 如果工厂不活跃但有足够的输入材料，getNextRunTime返回null
这是通过if (!isActive() && hasEnoughInputs()) return null实现的
null在这里表示"立即运行"
5. 当nextRunTime为null时，schedulePin会在当前时间安排工厂运行（addTimer(pin.id, currentSimTime)）
这确保工厂在当前模拟时间点被处理，而不是等待未来
6. 这个事件被添加到事件队列中
通过eventQueue.add(runTime to pinId)实现
7. 在事件处理循环中，工厂的事件被处理，调用evaluatePin
这发生在同一模拟时间点，但在代码执行上是下一个事件循环迭代
8. 在evaluatePin中，工厂会检查材料是否足够，如果足够，就会消耗材料并开始生产
工厂会设置isActive = true并记录生产开始时间

情况二：收到不足的资源
1-3相同，但如果在步骤4中，工厂没有足够的输入材料，流程会有所不同：
4. 如果工厂没有足够的输入材料，getNextRunTime返回lastRunTime + cycleTime
这表示工厂需要等待到下一个周期
5. schedulePin会在下一个周期时间安排工厂运行（addTimer(pin.id, nextRunTime)）
工厂会被安排在未来的某个时间点运行，而不是立即运行
6-8. 其余步骤相同，但会在未来的时间点执行，而不是当前时间

让我列出工厂相关的关键方法，这些方法在模拟过程中会被调用：
1. simulate - 主模拟方法
2. runEventDrivenSimulation - 事件驱动模拟的核心循环
3. initializeSimulation - 初始化事件队列
4. canRun - 检查设施是否可以运行
5. canActivate - 检查设施是否可以激活
6. isActive - 检查设施是否处于激活状态
7. hasEnoughInputs - 检查工厂是否有足够的输入材料
8. getNextRunTime - 获取设施的下一次运行时间
9. schedulePin - 安排设施的下一次运行
10. run - 运行设施
11. runFactory - 运行工厂
12. routeCommodityInput - 处理输入路由
13. routeCommodityOutput - 处理输出路由
现在，让我们按照调用顺序的逆向顺序，从底层方法开始分析。


### 仓储将资源分配给工厂的顺序

1. 先为最缺资源的工厂进行分配，然后根据id顺序为各工厂进行分配。分配的资源会进入缓冲区，缓冲区满后工厂会立刻转为生产状态，并清空缓冲区。
2. 当一轮分配完以后，如果还有多余的资源，且有某些工厂的缓冲区有剩余空间，则会再分配一轮，顺序同上。
3. 最终要么所有工厂的缓冲区都填满了，或仓储没有剩余资源了为止。

### 提示词

```
我们设计了一套 Swift 代码用于模拟 EVE Online 的行星开发系统，其逻辑是基于 RIFT 项目的 Kotlin 代码实现的。
Swift 代码路径：EVE Nexus/Business/Planetary
Kotlin 代码路径：Third_tools/src/main/kotlin/dev/nohus/rift/planetaryindustry

第一步：先分析目录结构

1.请分别读取 Swift 代码和 Kotlin 代码的目录结构，而不是立即查看代码内容。
2.识别文件名、类名、函数名，并总结文件组织方式。
3.找出 Swift 代码和 Kotlin 代码的主要逻辑对应关系，例如 PlanetSimulator.swift 对应 PlanetSimulator.kt，或者 ResourceManager.swift 对应 ResourceManager.kt。

第二步：逐个方法进行代码对比

1.逐个方法、逐个类进行对比，重点检查以下问题：
2.逻辑是否一致：是否缺少某个计算步骤、条件分支、循环等。
3.变量作用域与类型转换：Swift 和 Kotlin 可能有不同的作用域规则，比如 var、val 与 let、var 的区别。
4.时间计算单位：Kotlin 可能使用 System.currentTimeMillis() 或 Duration，而 Swift 可能使用 Date、TimeInterval，单位是否一致？
5.数据结构与集合操作：Swift 的 Array, Dictionary, Set 是否与 Kotlin 的 List, Map, Set 具有相同的行为？
6.浮点数精度问题：Swift 可能用 Double，Kotlin 可能用 Float 或 BigDecimal，是否影响计算精度？

第三步：输出对比报告

1请总结两份代码的主要逻辑差异，并指出可能导致计算结果不同的关键点。
2.给出修正建议，例如：“Swift 代码中的 processCycle() 方法少了一次 updateResource() 调用，这可能导致资源数量计算偏差。”

注意：

1.你不需要优化代码，仅需确保 Swift 代码完全还原 Kotlin 代码的逻辑。
2.如果遇到 Swift 代码比 Kotlin 代码多出的部分，请说明这些额外逻辑是否影响计算结果。
```